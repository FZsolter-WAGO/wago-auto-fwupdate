#!/bin/bash

WAGO_FIRMWARE_REPOSITORY="https://wagohungary.ddns.net:8443"
WAGO_FWUPDATE="/etc/config-tools/fwupdate"
WAGO_COUPLER_DETAILS="/etc/config-tools/get_coupler_details"
CURRENT_ORDER_NUMBER="$($WAGO_COUPLER_DETAILS order-number)"

input1="$1"
input2="$2"

main () {
    if [ "$EUID" -ne 0 ]
    then
        echo "ERROR: Please run the script as root"
        exit 1
    fi
    case $CURRENT_ORDER_NUMBER in
        750-8100 | 750-8101 | 750-8101/0025-0000 | 750-8102 | 750-8102/0025-0000 | 750-8101/0000-0010 | 750-8202 | 750-8203 | 750-8204 | 750-8206 | 750-8207 | 750-8208 | 750-8202/0025-0000 | 750-8202/0025-0001 | 750-8202/0025-0002 | 750-8203/0025-0000 | 750-8204/0025-0000 | 750-8206/0025-0000 | 750-8206/0025-0001 | 750-8207/0025-0000 | 750-8207/0025-0001 | 750-8208/0025-0000 | 750-8208/0025-0001 | 750-8202/0040-0000 | 750-8202/0040-0001 | 750-8206/0040-0000 | 750-8206/0040-0001 | 750-8202/0000-0011 | 750-8202/0000-0012 | 750-8202/0000-0022 | 750-8207/0000-0022)
            FW_TYPE=pfc_g1
            ;;
        750-8210 | 750-8210/0025-0000 | 750-8210/0040-0000 | 750-8211 | 750-8211/0040-0000 | 750-8211/0040-0001 | 750-8212 | 750-8212/0000-0100 | 750-8212/0025-0000 | 750-8212/0025-0001 | 750-8212/0025-0002 | 750-8212/0040-0000 | 750-8212/0040-0001 | 750-8212/0040-0010 | 750-8213 | 750-8213/0040-0010 | 750-8214 | 750-8215 | 750-8216 | 750-8216/0025-0000 | 750-8216/0025-0001 | 750-8216/0040-0000 | 750-8217 | 750-8217/0025-0000 | 750-8217/0600-0000 | 750-8217/0625-0000)
            FW_TYPE=pfc_g2
            ;;
        762-4101 | 762-4102 | 762-4103 | 762-4104 | 762-4301/8000-0002 | 762-4302/8000-0002 | 762-4303/8000-0002 | 762-4304/8000-0002 | 762-4305/8000-0002 | 762-4306/8000-0002 | 762-5303/8000-0002 | 762-5304/8000-0002 | 762-5305/8000-0002 | 762-5306/8000-0002 | 762-6301/8000-0002 | 762-6302/8000-0002 | 762-6303/8000-0002 | 762-6304/8000-0002 | 752-8303/8000-0002)
           FW_TYPE=tp600
            ;;
        751-9301)
            FW_TYPE=cc100
            ;;
        *)
            echo ERROR: Unsupported type of device
            exit 1
            ;;
    esac
    case "$input1" in
        list)
            list
            ;;
        install)
            if ps aux | grep -v grep | grep -E -q "bash -s (install|finish)" | grep -v $$; then
                echo "ERROR: Another instance of the script is already running."
                exit 1
            fi
            install
            ;;
        finish)
            if ps aux | grep -v grep | grep -E -q "bash -s (install|finish)" | grep -v $$; then
                echo "ERROR: Another instance of the script is already running."
                exit 1
            fi
            finish
            ;;
        *)
            echo ""
            echo "   wago-autodownload-fwupdate 1.0.1 - Tool for downloading and deploying a specific WAGO firmware version"
            echo ""
            echo "   Usage: .../wago-autodownload-fwupdate | bash -s (help|list|install \"FIRMWARE_REVISION\"|finish)"
            echo ""
            echo "   Example: .../wago-autodownload-fwupdate | bash -s list"
            echo "   Example: .../wago-autodownload-fwupdate | bash -s install \"04.03.03(25)\""
            echo "   Example: .../wago-autodownload-fwupdate | bash -s finish"
            echo ""
            ;;
    esac
}

finish() {
    CURRENT_FWUPDATE_STATUS=$($WAGO_FWUPDATE status | grep status= | awk -F'=' '{print $2}')
    if [[ -z "$CURRENT_FWUPDATE_STATUS" ]]; then
        echo "ERROR: /etc/config-tools/fwupdate is not available"
        exit 1
    fi
    if [[ "$CURRENT_FWUPDATE_STATUS" = "inactive" ]]; then
        echo "ERROR: Firmware update is inactive"
        exit 1
    fi
    bg_service &
    echo "Background service started, fwupdate is in progress..."
    exit 0
}

install() {
    if [[ -z "$input2" ]]; then
        echo "ERROR: Please enter a firmware revision, like \"04.03.03(25)\""
        exit 1
    fi
    CURRENT_FWUPDATE_STATUS=$($WAGO_FWUPDATE status | grep status= | awk -F'=' '{print $2}')
    if [[ -z "$CURRENT_FWUPDATE_STATUS" ]]; then
        echo "ERROR: /etc/config-tools/fwupdate is not available"
        exit 1
    fi
    if [[ "$CURRENT_FWUPDATE_STATUS" != "inactive" ]]; then
        echo "ERROR: Firmware update is in progress"
        exit 1
    fi
    echo "Trying to download \"$input2\" for $CURRENT_ORDER_NUMBER..."
    get_certs
    repo_download "$WAGO_FIRMWARE_REPOSITORY/$FW_TYPE/$input2/FW.md5" "/tmp/FW.md5"
    if [ ! -s "/tmp/FW.md5" ]; then
        echo "ERROR: Invalid firmware revision input"
        rm_certs
        exit 1
    fi
    repo_download "$WAGO_FIRMWARE_REPOSITORY/$FW_TYPE/$input2/FW.raucb" "/tmp/FW.raucb"
    rm_certs
    if [ ! -s "/tmp/FW.raucb" ]; then
        echo "ERROR: Error while downloading firmware file"
        exit 1
    fi
    downloaded_md5=$(md5sum /tmp/FW.raucb | awk '{print $1}')
    expected_md5=$(cat /tmp/FW.md5)
    if [ "$downloaded_md5" != "$expected_md5" ]; then
        echo "ERROR: Firmware file validation failed. The downloaded file is not valid."
        exit 1
    fi
    bg_service &
    echo "Background service started, fwupdate is in progress..."
    exit 0
}

bg_service () {
    FIRST_TRY=true
    while true; do
        CURRENT_FWUPDATE_STATUS=$($WAGO_FWUPDATE status | grep status= | awk -F'=' '{print $2}')
        case $CURRENT_FWUPDATE_STATUS in
            inactive)
                if ! $FIRST_TRY; then
                    exit 1
                fi
                FIRST_TRY=false
                $WAGO_FWUPDATE activate &>/dev/null
                ;;
            prepared)
                mv /tmp/FW.raucb /tmp/fwupdate/FW.raucb
                $WAGO_FWUPDATE start -q --path /tmp/fwupdate &>/dev/null
                ;;
            unconfirmed)
                $WAGO_FWUPDATE finish &>/dev/null
                ;;
            error | finished)
                $WAGO_FWUPDATE clear &>/dev/null
                echo "Firmware update finished"
                exit 0
                ;;
        esac
        sleep 10
    done
}

list () {
    get_certs
    repo_download "$WAGO_FIRMWARE_REPOSITORY/list" "/tmp/wago-autodownload-fwupdate.list"
    rm_certs
    if [ $? -ne 0 ]; then
        echo "ERROR: Failed to download the list"
        exit 1
    fi
    FIRST_FOUND=true
    while IFS= read -r line; do
        line_fw_type=$(echo "$line" | awk '{print $1}')
        line_fw_version=$(echo "$line" | awk '{print $2}')
        if [ "$line_fw_type" = "$FW_TYPE" ]; then
            if $FIRST_TRY; then
                echo "The following firmware revisions are available"
                FIRST_TRY=false
            fi
            echo "  \"$line_fw_version\""
        fi
    done < /tmp/wago-autodownload-fwupdate.list
    rm /tmp/wago-autodownload-fwupdate.list -f
    if $FIRST_TRY; then
        echo ERROR: Unsupported type of device
    fi
    exit 0
}

get_certs () {
    wget -O /tmp/fwupdate_ca.crt "https://raw.githubusercontent.com/FZsolter-WAGO/wago-autodownload-fwupdate/main/certs/ca.crt" &>/dev/null
    wget -O /tmp/fwupdate_client.crt "https://raw.githubusercontent.com/FZsolter-WAGO/wago-autodownload-fwupdate/main/certs/client.crt" &>/dev/null
    wget -O /tmp/fwupdate_client.key "https://raw.githubusercontent.com/FZsolter-WAGO/wago-autodownload-fwupdate/main/certs/client.key" &>/dev/null
}

rm_certs () {
    rm /tmp/fwupdate_ca.crt -f &>/dev/null
    rm /tmp/fwupdate_client.crt -f &>/dev/null
    rm /tmp/fwupdate_client.key -f &>/dev/null
}

repo_download () {
    local url="$1"
    local output_file="$2"
    server_port="$(echo "$WAGO_FIRMWARE_REPOSITORY" | awk -F[/:] '{print $4, $5}')"
    server=$(echo "$server_port" | awk '{print $1}')
    port=$(echo "$server_port" | awk '{print $2}')
    (echo -ne "GET $url HTTP/1.1\r\n";
    echo -ne "Host: $server\r\n";
    echo -ne "Connection: close\r\n\r\n") | \
    openssl s_client -connect "$server:$port" -key "/tmp/fwupdate_client.key" -cert "/tmp/fwupdate_client.crt" -CAfile "/tmp/fwupdate_ca.crt" -quiet 2>/dev/null | \
    sed -n '/^\r$/,$p' | tail -n +2 > "$output_file"
}

main
